import heapq

def a_star(graph, start, goal, h):
    open_list = []
    heapq.heappush(open_list, (0 + h[start], 0, start, [start]))  # (f = g + h, g, node, path)
    closed_set = set()

    while open_list:
        f, g, current, path = heapq.heappop(open_list)

        if current == goal:
            return path, g

        closed_set.add(current)

        for neighbor, cost in graph[current].items():
            if neighbor in closed_set:
                continue
            g_new = g + cost
            f_new = g_new + h[neighbor]
            heapq.heappush(open_list, (f_new, g_new, neighbor, path + [neighbor]))

    return None, float('inf')


# Example graph (Adjacency list with costs)
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'C': 2, 'D': 5},
    'C': {'D': 1},
    'D': {}
}

# Heuristic values (straight-line distance estimate to goal 'D')
heuristic = {
    'A': 7,
    'B': 6,
    'C': 2,
    'D': 0
}

# Run A* from A to D
path, cost = a_star(graph, 'A', 'D', heuristic)

print("Shortest Path:", path)
print("Total Cost:", cost)
