import heapq

goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  # 0 represents the blank tile

# Helper to calculate Manhattan Distance
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                goal_x = (val - 1) // 3
                goal_y = (val - 1) % 3
                distance += abs(i - goal_x) + abs(j - goal_y)
    return distance

# Helper to find blank (0) position
def find_zero(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Generate possible moves
def get_neighbors(state):
    neighbors = []
    x, y = find_zero(state)
    directions = [(-1,0), (1,0), (0,-1), (0,1)]
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

# A* Search Algorithm
def a_star(start):
    pq = []
    heapq.heappush(pq, (manhattan_distance(start), 0, start, []))
    visited = set()

    while pq:
        est_total, cost, state, path = heapq.heappop(pq)
        state_tuple = tuple(map(tuple, state))

        if state == goal_state:
            return path + [state]

        if state_tuple in visited:
            continue
        visited.add(state_tuple)

        for neighbor in get_neighbors(state):
            heapq.heappush(pq, (cost + 1 + manhattan_distance(neighbor), cost + 1, neighbor, path + [state]))

    return None

# Example usage
start_state = [[1, 2, 3],
               [4, 0, 6],
               [7, 5, 8]]

solution = a_star(start_state)

# Print solution
if solution:
    print("Steps to solve:")
    for step in solution:
        for row in step:
            print(row)
        print()
else:
    print("No solution found.")
